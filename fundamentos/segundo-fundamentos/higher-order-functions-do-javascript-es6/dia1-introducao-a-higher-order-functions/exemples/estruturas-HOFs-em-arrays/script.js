//SOME()
// [üèÄ, üèì, üçé, üçï, ü•ù, üê≥, üçé].some(üçï) -> true

//EVERY()
// [üèÄ, üèì, üçé, üçï, ü•ù, üê≥, üçé].every(üçé) -> false;

//FIND()
// [üèÄ, üèì, üçé, üçï, ü•ù, üê≥, üçé].find(ü•ù) -> ü•ù;

//FILTER()
// [üèÄ, üçï, üçé, üçï, üçï, üê≥, üçé].filter(üçï) -> [üçï, üçï, üçï];

//FOREACH()
// [2, 4, 6, 8, 10].forEach(* 2) -> [4, 8, 12, 16, 20]

//SORT()
// [7, 5, 8, 3, 2, 1, 4, 6].sort() -> [1, 2, 3, 4, 5, 6, 7, 8]

//MAP()
// [üêÆ, ü•î, üåΩ, ü™µ, üçé].map(üè≠) -> [üçî, üçü, üçø, ü™ë, ü•ß]

//REDUCE()
// [üçî, üçü, üçø, ü•ß, üç©].reduce(üçΩ) -> üí© 

const arrayOfValues = ['jos√©', 50, 0.25, { comida: 'Chocolate' }];

arrayOfValues.forEach((element, index) => {
  console.log(`O elemento atual √©: ${element} e possui o index: ${index}`);
});

// O c√≥digo acima est√° organizado da seguinte maneira:

// arrayOfValues: nome do array que ser√° percorrido;
// .forEach: a HOF usada. Poderia ser outra HOF, como .find, .some, .every, entre outras, que a estrutura seria a mesma;
// element: valor do elemento do array;
// (element, index) => { /* c√≥digo */ }: fun√ß√£o a ser executada.